IMAGENS

    import cv2
    # Importando a imagem de teste
    arquivoImagem = 'imagem2.jpg'
    # Importando o xml contendo o classificador de veiculos pré treinado
    arquivoClassificador = 'baseVeiculos.xml'
    # Criando uma imagem com o opencv
    imagem = cv2.imread(arquivoImagem)
    # Transformando a imagem em preto e branco na grayscale para utilizar o haar cascade
    pretoBranco = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)
    # Criando o classificador que vai reconhecer veiculos
    rastrearCarros = cv2.CascadeClassifier(arquivoClassificador)
    # Detectando carros com o detectMultiScale do cv2
    # É criado um lista que armazena outra lista contendo as coordenadas dos carros
    carros = rastrearCarros.detectMultiScale(pretoBranco)
    # Printa no terminal as coordenadas onde há carros dentro da imagem armazenada na lista de carros
    # [x, y, width, height]
    print(carros)
    # Desenhando um retangulo vermelho ao redor dos carros (2:57:00)
    # Para cada x,y,w,h em cada indice de carros
    for (x, y, w, h) in carros:
        cv2.rectangle(imagem, (x, y), (x+w, y+h), (0, 0, 225), 2)
    # Criando um display para exibir a imagem em uma janela
    cv2.imshow('Detector de Veiculos e Pedestres', imagem)
    # A função imshow durará só um frame
    # Então com essa função o programa só irá fechar apertando alguma tecla
    cv2.waitKey()
    print('Código executado com sucesso')

IMAGENS COM IDENTAÇÃO:

import cv2

# Importando a imagem de teste
arquivoImagem = 'imagem2.jpg'
# Importando o xml contendo o classificador de veiculos pré treinado
arquivoClassificador = 'baseVeiculos.xml'

# Criando uma imagem com o opencv
imagem = cv2.imread(arquivoImagem)

# Transformando a imagem em preto e branco na grayscale para utilizar o haar cascade
pretoBranco = cv2.cvtColor(imagem, cv2.COLOR_BGR2GRAY)

# Criando o classificador que vai reconhecer veiculos
rastrearCarros = cv2.CascadeClassifier(arquivoClassificador)

# Detectando carros com o detectMultiScale do cv2
# É criado um lista que armazena outra lista contendo as coordenadas dos carros
carros = rastrearCarros.detectMultiScale(pretoBranco)

# Printa no terminal as coordenadas onde há carros dentro da imagem armazenada na lista de carros
# [x, y, width, height]
print(carros)

# Desenhando um retangulo vermelho ao redor dos carros (2:57:00)
# Para cada x,y,w,h em cada indice de carros
for (x, y, w, h) in carros:
    cv2.rectangle(imagem, (x, y), (x+w, y+h), (0, 0, 225), 2)



# Criando um display para exibir a imagem em uma janela
cv2.imshow('Detector de Veiculos e Pedestres', imagem)

# A função imshow durará só um frame
# Então com essa função o programa só irá fechar apertando alguma tecla
cv2.waitKey()

print('Código executado com sucesso')